package assignment03;
import java.time.LocalDateTime;
import java.util.Optional;

public class CalendarList {
    private CalendarItem first;
    private CalendarItem next;
    private CalendarItem nowObject = new CalendarItem();    

    public void setNext()
    {
    	
     //  CalendarItem nowObject = new CalendarItem();    
       nowObject.setStart(LocalDateTime.now());
       nowObject.setEnd(LocalDateTime.now());
        
       LocalDateTime now = LocalDateTime.now();
       CalendarItem temp = first;
    	while(temp != null && (temp.getEnd().isEqual(now) || temp.getEnd().isBefore(now)) )
    	{
    		if(temp.getNextItem() == null)
    		{
    			next = temp;
    			break;
    		}
    		temp = temp.getNextItem();
    		
    		
    	}
    	
    }
    
    
    
    public void resetFirst()
    {
    	this.setNext();
    	next.setNextItem(first);
    
    	
    }
    
    
    
    private void insert(CalendarItem newItem)
    {
    	if(first == null)
    	{	first = newItem;
    		return;
    	}
    	else if(newItem.endsBefore(first))
    	{
    		newItem.getNextItem().setNextItem(first);;
    		first = newItem;
    	}
    	else 
    	{
    		CalendarItem temp= first;
    		while (temp.getNextItem()!= null)
    		{
    			if (newItem.endsBefore(temp.getNextItem()))
    			{
    				newItem.getNextItem().setNextItem(temp.getNextItem());
    				newItem = temp.getNextItem();
    				return;
    			}
    			temp = temp.getNextItem();
    		}
    		temp.setNextItem(newItem);
    	}
    		
    		
    }
    
    public Optional<CalendarItem> findConflict(CalendarItem newItem)
    {
    	
    	
    	if (first == null)
    		return Optional.empty();
    	
    	
    	CalendarItem temp = first;
    	
    	while (temp!= null)
    	{
    		
    		if(temp.hasTimeConflictWith(newItem))
    			return Optional.of(newItem);
    		temp = temp.getNextItem();
    	}
		return Optional.empty();

  
    }
    public void insertItem(CalendarItem newItem)
    {
    	 nowObject.setStart(LocalDateTime.now());
         nowObject.setEnd(LocalDateTime.now());
  
    	if (first != null)
    	{
    		this.setNext();
    		if(newItem.endsBefore(nowObject))
    		{
    			throw new IllegalArgumentException("It is to late for that appointment");
    		}
    		if(newItem.getStart().isBefore(LocalDateTime.now()))
    		{
    			throw new IllegalArgumentException("That appointment is under way--run!");

    		}
    			Optional <CalendarItem> temp = findConflict(newItem);
    		if(temp.isPresent()) {
    			throw new IllegalArgumentException("You have a conflict. "
    			+ "Please use findConflict to find the conflicting appointment");
    		}
    	}
    	this.insert(newItem);
    	
    	
    	
    }
    public void printNext()
    {
    	System.out.println(next);
    }
    
    
    public void printCalendar()
    {
    	CalendarItem temp = first;
    	while (temp!= null)
    	{
    		if (temp!= null)
    			System.out.println(temp);
    		temp = temp.getNextItem();
    		
    		
    	}
    	
    	
    	
    }
    
	public static void main(String[] args) {
try {
		CalendarList testing = new CalendarList();
		CalendarItem test2 = new CalendarItem();
		test2.setDescription("this is just a sample meeting of CS 301");
		test2.setEnd(LocalDateTime.of(2017,9,13,11,50));
		test2.setStart(LocalDateTime.of(2017,9,12,10,50));
		test2.setTitle("CS 301");
		test2.setLocation("NB 22");
		
		
		testing.insertItem(test2);
		
		
		CalendarItem test3 = new CalendarItem();
		test3.setDescription("this is just a sample meeting of CS 240");
		test3.setEnd(LocalDateTime.of(2017,11,24,11,50));
		test3.setStart(LocalDateTime.of(2017,11,24,10,50));
		test3.setTitle("CS 240");
		test3.setLocation("FA 122");
		
		testing.insertItem(test3);

		//testing.printNext();
		
		
		
		CalendarItem test = new CalendarItem();
		test.setDescription("this is just a sample meeting of CS 140");
		test.setEnd(LocalDateTime.of(2017,11,25,11,50));
		test.setStart(LocalDateTime.of(2017,11,25,10,50));
		test.setTitle("CS 140");
		test.setLocation("FA 212");
		
		
		testing.insertItem(test);

		testing.printCalendar();
//System.out.println(testing.first);
	} catch (IllegalArgumentException e)
					{
						System.out.println(e);
					}
		
	}
    
    
    
}