Please edit this file with a text editor, and turn in your edited file on 
myCourses under "Content" in the "Homework Submissions" folder.

Name: 

1. Write the word "True" at the start of the blank line after the following 
   statements if they are true, or "False" if they are incorrect.

	A. The "make" command allows us to ensure all pre-requisite steps have
	been completed, that we use the same build commands with the same
	options every time we build, and allows us to encode a complicated
	recipe for building or testing code as a simple target.
	True
	
	B. One of the most powerful concepts of the C programming language is
	the ability to treat a complex function as a simple abstract mechanism
	which reads arguments, and returns a value.
	True
	
	C. The code snippet "int x=10; while(x>0); x--;" compiles with no errors 
	and runs to completion when executed.
	False
	
	D. It is valid to use "if_for" as a variable name in C, even though
	anyone who reads the code will probably be confused.
	True
	
	E. Upside down code can be avoided by putting function declarations at
	the top of a C file. However doing so requires specification of the 
	return type, function name, and argument list twice.
	True
	

2. Write a C function that takes two integer arguments which represent the width
   and height of a rectangle. Your function should calculate and return the area
   of the rectangle.
   
   int Area(int w, int h){
	
	return (w * h);


	}
    
   
  3. Compile the following C code:
  
  	#include <stdio.h>
	#include <stdlib.h>
	
	int main(int argc, char **argv) {
	
		int x; int y; int s_sum;
		unsigned int v; unsigned int w; unsigned int u_sum;
	
		if (argc<3) {
			printf("Please invoke as %s num1 num2\n",argv[0]);
			return 1;
		}
	
		x=atoi(argv[1]);
		y=atoi(argv[2]);
		v=x;
		w=y;
		s_sum=x+y;
		u_sum=v+w;
		printf("Signed: %d + %d = %d\n",x,y,s_sum);
		printf("Unsigned: %u + %u = %u\n",v,w,u_sum);
		if (s_sum==u_sum) { printf("The result matches\n"); }
		else { printf("The result is different\n"); }
		return 0;
	}
	
   Then invoke the resulting program, specifying two numbers as command line
   arguments.
   
   Can you run this program with any arguments that ends up printing "The 
   results are different"?
  No
   
   Can you figure out why?
 I tried inserting multiple numbers ranging from positive and negative integers. I simply could not get it to display "The result is different". If we use the example of -1 + -2 it will be stored as a -3 as a signed value in int x and y. once we make a copy of x and y and the sum to variables v, w, u_sum, it is stored as unsigned values due to how they were declared. Both are stored differently, the signed value "knows" that it is a negative due to 2's compliment with the left bit. The Unsigned value is stored as one of the higher max numbers of the unsigned values length. My guess is that when the compiler compiles, it transforms all the signed numbers into unsigned values to have a "fair" comparison which is why the message always results as "matched" even though the previous print statement had "different" looking outputs. 