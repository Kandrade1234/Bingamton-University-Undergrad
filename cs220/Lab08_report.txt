Answer questions 1-4 with the optimization set at its original value, "OPT=O0".

1. Scan through the x86Math.s and x86Math.objdump.txt files side by side.
	A. Do these two files contain similar sets of x86 instructions for the 
	   "add" function?
	   yes they are similar not an exact match but similar, just formating is a little different but instructions are similar. 

	B. Do both files refer back to the original C code from which they were
	   derived?
		yes they refer back to the original c code.	   

	C. Does the gdb disassembly match the x86 instructions in both the .s  
	   and objdump files?
		No, the gdb  matches the objdump.txt file  with slight differences in the hex code but it does not match the x86Math.s file. 
	   
	D. Which format of all three do you find easier and why? 
		Depending on what i want to do i would say the gdb version or the x86Math.obj,txt file. Despite the .txt file and gdb being the same if i was intrested in seeing the values at each register than the gdb would be a lot simpler to use, since i can print the value out from gdb making it easier to use and understand.

2. How many assembler instructions are required for:
	A. the "add" function :		15
	B. the "subtract" function:	14
	
3. How many bytes (in hex) are needed for the x86 version of the x86Math 
   program? (You can find this by scrolling to the bottom of file x86Math.s 
   and finding the offset associated with the last instruction in the file.)
	0172    
	
4. Find the x86 add instruction that adds op1+op2 in the add function.
	A. What line number is that instruction at in the x86Math.s file?
		159
	
	B. What hexadecimal address contains that instruction from the 
	   x86Math.objdump.txt file? 
		7eb 
	
5. In gdb, just before you execute the instruction at 0x00005555555547eb for 
   the first time:
	A. What is the value in the "edx" register? 
		
		0
	B. What is the value in the "eax" register?
		4

	C. After you execute the instruction, what is the value in the "eax" 
	   register?
		4
Answer questions 6-8 with the optimization variable set to "OPT=O1" to do some 
optimization

6. Is it still possible to map directly from C code to x86 assembler 
   instructions? What has happened?
	it is not as easy as before. There is a bunch of assembly code missing, therefore just looking at it directly it would make it hard to map it to c code since it isnt possible. 
	
7. In gdb, what x86 instruction is about to get executed when you reach the 
   first breakpoint in the "add" function?
	add $0x4, %edi
	 
8. 	A. How many bytes are needed for this x86 version of the x86Math 
	   program? 
		0086
	B. How does this compare to the length of the previous version? 
		this length is smaller by EC
	C. Why is there a difference?
	since the current version is a more optimized version and the length of it is different, a different amount of bytes are needed. 
	 
Answer questions 9-10 with the optimization value set to "OPT=O0 -DSIMPLE"

9. 	A. How many bytes are needed for this x86 version of the x86Math 
	   program?
		012a 
	B. How does this compare to previous versions?
		for the original version this version is smaller and there is a difference of 48 hex in size. In the previous version the size difference is A4 hex with this one being bigger. 		

	C. Does the gcc optimizer do a better job than a human in this case?
		yes since this version is smaller than the original.

10. Compare the x86 instructions for the add function with the x86 
    instructions for the add function in the first part of the lab. What is 
    the main difference?
	The main difference is that this add version is much more condensed than the original part of the lab. The Optimized code only uses 9 instructions, while the original has 15 instructions. The simple versions of the methods are used instead of the complicated ones.

